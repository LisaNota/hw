#include <stdio.h>
#include <malloc.h>
// Один узел
struct list {
    int field;
    struct list *ptr;
};

// Инициализация
struct list * init(int a) // где а - значение первого узла
{
    struct list *lst;
    // выделение памяти под корень списка
    lst = (struct list*)malloc(sizeof(struct list));
    lst->field = a;
    lst->ptr = NULL; // это последний узел списка
    return(lst);
}

// Добавление нового узла
struct list * addelem(struct list *lst, int number) {
    struct list *temp, *p;
    temp = (struct list*)malloc(sizeof(struct list));
    p = lst->ptr; // сохранение указателя на следующий узел
    lst->ptr = temp; // предыдущий узел указывает на создаваемый
    temp->field = number; // сохранение поля данных добавляемого узла
    temp->ptr = p; // созданный узел указывает на следующий элемент
    return(temp);
}

// Удаление узла
struct list * deletelem(struct list *lst, struct list *root)
{
    struct list *temp;
    temp = root;
    while (temp->ptr != lst) // просматриваем список начиная с корня
    { // пока не найдем узел, предшествующий lst
        temp = temp->ptr;
    }
    temp->ptr = lst->ptr; // переставляем указатель
    free(lst); // освобождаем память удаляемого узла
    return(temp);
}

// Вывод элементов списка
void listprint(struct list *lst){
    struct list *p;
    p = lst;
    do {
        printf("%d ", p->field); // вывод значения элемента p
        p = p->ptr; // переход к следующему узлу
    } while (p != NULL);
}

void main() {
    struct list* head = 0, * head1 = 0;
    int a, n;
    struct  list* p1 = 0;
    struct  list* p2 = 0;
    printf("Количество элементов в списке: ");
    scanf("%d", &n);

    // Создание списка
    for (int i = 0; i < n; i++)
    {
        printf("Введите элемент:");
        scanf("%d", &a);
        if (i == 0)
        {
            head = p1 = init(a);
            head1 = init(a);
            head = p1;
        }
        else
            p1 = addelem(p1, a);
    }
    // Вывод списка
    listprint(head);
    free(p1);
    free(p2);
}
